[concat('<policies>
    <inbound>
        <base />
        <set-header name="x-api-version" exists-action="override">
            <value>@(context.Api.Version)</value>
        </set-header>
        <choose>
            <when condition="@("North Europe".Equals(context.Deployment.Region, StringComparison.OrdinalIgnoreCase))">
            <set-backend-service base-url="', parameters('trade-api-certificates-store-v1-serviceUrl') ,'" />
        </when>
        <when condition="@("West Europe".Equals(context.Deployment.Region, StringComparison.OrdinalIgnoreCase))">
        <set-backend-service base-url="', parameters('secondaryServiceUrl') ,'" />
    </when>
    <otherwise>
        <set-backend-service base-url="', parameters('trade-api-certificates-store-v1-serviceUrl') ,'" />
    </otherwise>
</choose>
<validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid." require-expiration-time="true" require-scheme="Bearer" require-signed-tokens="true" clock-skew="900" output-token-variable-name="jwt">
<openid-config url="', concat('https://login.microsoftonline.com/', subscription().tenantId, '/.well-known/openid-configuration') ,'" />
<required-claims>
    <claim name="aud">
        <value>@((string)context.Variables["Audience"])</value>
    </claim>
    <claim name="iss">
        <value>https://sts.windows.net/', subscription().tenantId, '/</value>
    </claim>
    <claim name="tid">
        <value>', subscription().tenantId, '</value>
    </claim>
</required-claims>
</validate-jwt>
        </inbound>
<backend>
<base />
</backend>
<outbound>
<base />
</outbound>
<on-error>
<base />
</on-error>
        </policies>')]