// <auto-generated />
using System;
using Defra.Trade.API.CertificatesStore.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Defra.Trade.API.CertificatesStore.Database.Migrations
{
    [DbContext(typeof(CertificatesStoreDbContext))]
    [Migration("20231110113659_UpdateGcDocumentTable")]
    partial class UpdateGcDocumentTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("gcs")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Defra.Trade.API.CertificatesStore.Database.Models.EnrichmentData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedSystem")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GeneralCertificateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedSystem")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GeneralCertificateId")
                        .IsUnique()
                        .HasFilter("[GeneralCertificateId] IS NOT NULL");

                    b.ToTable("EnrichmentData", "gcs");
                });

            modelBuilder.Entity("Defra.Trade.API.CertificatesStore.Database.Models.GeneralCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedSystem")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralCertificateId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedSystem")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GeneralCertificateId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("GeneralCertificateId"), false);

                    b.HasIndex("LastUpdatedOn");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("LastUpdatedOn"), false);

                    b.ToTable("GeneralCertificate", "gcs");
                });

            modelBuilder.Entity("Defra.Trade.API.CertificatesStore.Database.Models.GeneralCertificateDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GeneralCertificateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListAgencyId")
                        .HasColumnType("int");

                    b.Property<int>("TypeCode")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GeneralCertificateId");

                    b.ToTable("GeneralCertificateDocument", "gcs");
                });

            modelBuilder.Entity("Defra.Trade.API.CertificatesStore.Database.Models.EnrichmentData", b =>
                {
                    b.HasOne("Defra.Trade.API.CertificatesStore.Database.Models.GeneralCertificate", "GeneralCertificate")
                        .WithOne("EnrichmentData")
                        .HasForeignKey("Defra.Trade.API.CertificatesStore.Database.Models.EnrichmentData", "GeneralCertificateId");

                    b.Navigation("GeneralCertificate");
                });

            modelBuilder.Entity("Defra.Trade.API.CertificatesStore.Database.Models.GeneralCertificateDocument", b =>
                {
                    b.HasOne("Defra.Trade.API.CertificatesStore.Database.Models.GeneralCertificate", "GeneralCertificate")
                        .WithMany()
                        .HasForeignKey("GeneralCertificateId");

                    b.Navigation("GeneralCertificate");
                });

            modelBuilder.Entity("Defra.Trade.API.CertificatesStore.Database.Models.GeneralCertificate", b =>
                {
                    b.Navigation("EnrichmentData");
                });
#pragma warning restore 612, 618
        }
    }
}
